#!/usr/bin/python3
# coding=utf-8
import sys
import json
import random

def getDisksFromDiskstats(diskstats):
    disks = []
    for o in diskstats:
        if o['diskname'] not in disks:
            add = True
            for d in disks:
                # is master dev and part in disks, replace
                if o['diskname'] in d:
                    if o['diskname'] not in disks:
                        disks[disks.index(d)] = o['diskname']
                    else:
                        # clear muti parts in disks
                        disks.remove(d)
                    add = False
                    continue
                # is part dev and master in disks, do nothing
                if d in o['diskname']:
                    add = False
                    break
            if add:
                disks.append(o['diskname'])
    return disks

def iofsstatJoinData(raw):
    if raw.find("diskstats") == -1:
        print({"status": "fail"})
        return

    stat = {}
    stat["disks"] = {"data": []}
    for s in raw.split('\n'):
        try:
            obj = json.loads(s)
        except Exception:
            continue
        if "diskstats" in str(s):
            disks = getDisksFromDiskstats(obj["diskstats"])
            stat["disks"]["data"] = \
                [{'key':disks.index(d), 'value':d} for d in disks]
            for d in disks:
                if ("diskIOstat_"+d) not in stat.keys():
                    stat["diskIOstat_"+d] = {"data": []}
                for o in obj["diskstats"]:
                    if d in o['diskname']:
                        stat["diskIOstat_"+d]["data"].append(o)
        elif "mstats" in str(s):
            for d in disks:
                if ("taskIOstat_"+d) not in stat.keys():
                    stat["taskIOstat_"+d] = {"data": []}
                    stat["taskIOblocksize_"+d] = {"data": []}

                for o in obj["mstats"]:
                    if d not in o['device']:
                        continue
                    pat = {'comm': o['comm'], 'tgid:pid': '-:'+o['pid']}
                    patKey = []
                    for key, value in o.items():
                        if 'pat' in key:
                            if o['iops_wr'] == 0 or value == 0:
                                pat[key] = '0'
                            else:
                                pat[key] = \
                                    format(value/(o['iops_wr']*1.0)*100, '.2f')+'%'
                            patKey.append(key)
                    for key in patKey:
                        del o[key]
                    stat["taskIOblocksize_"+d]["data"].append(pat)

                    o['file'] = str(o['file'])
                    if 'bufferio' in o.keys():
                        o['children'] = o['bufferio']
                        for e in o['children']:
                            task = e['task'].rsplit(':',2)
                            e['comm'] = task[0]
                            e['tgid:pid'] = task[1]+':'+task[2]
                            e['bps_wr'] = e['Wrbw']
                        del o['bufferio']
                    new = list(o.items())
                    new[1] = ('tgid:pid', '-:'+o['pid'])
                    idx = obj["mstats"].index(o)
                    obj["mstats"][idx] = dict(new)
                    stat["taskIOstat_"+d]["data"].append(obj["mstats"][idx])
    s = json.dumps(stat, indent=4)
    print(s)

def extract_params():
    path, res, task_id = sys.argv[1], "", sys.argv[2]
    with open(path, 'r') as tmp:
        res = tmp.read()
    return res, task_id

if __name__ == "__main__":
    res, _ = extract_params()
    iofsstatJoinData(res)
